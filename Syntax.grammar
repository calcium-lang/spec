# Syntax
## Packages
CompilationUnit:
    [PackageDeclaration] [ImportDeclarations] TopLevelTypeDeclaration

---

PackageDeclaration:
    "package" PackageName [";"]

ImportDeclarations:
    ImportDeclaration {ImportDeclaration}

TopLevelTypeDeclaration:
    [DeclarationEncapsulation] TypeDeclaration

---

ImportDeclaration:
    "import" ImportNames [FromName] [";"]

DeclarationEncapsulation:
    (one of)
    "public" "protected" "private"

TypeDeclaration:
    TypedefDeclaration
    EnumDeclaration
    UnionDeclaration
    StructDeclaration

---

ImportNames:
    ImportName {"," ImportName}

FromName:
    "from" PackageOrTypeName

## Names
PackageName:
    Identifier {"." Identifier} [Version]

ImportName:
    Identifier [Version] ["as" Identifier]

PackageOrTypeName:
    Identifier [Version] {"." Identifier [Version]}

## Typedefs, Enums, Unions and Structs
TypedefDeclaration:
    "typedef" Identifier [Version] BaseType [TypedefBody]

EnumDeclaration:
    [EnumLayout] "enum" Identifier [Version] [BaseType] EnumBody

UnionDeclaration:
    "union" Identifier [Version] UnionBody

StructDeclaration:
    [DeclarationExtensibility] [StructLayout] "struct" Identifier [Version] [BaseType] StructBody

---

Version:
    "@" IntegerLiteral "." IntegerLiteral

BaseType:
    ":" Type

TypedefBody:
    "{" BodyDeclarations "}"
    ";"

EnumLayout:
    "strict"

EnumBody:
    "{" EnumConstants [";" BodyDeclarations] "}"

UnionBody:
    "{" UnionTypes [";" BodyDeclarations] "}"

DeclarationExtensibility:
    (one of)
    "open" "abstract"

StructLayout:
    (one of)
    "strict" "ordered" "packed"

StructBody:
    "{" [BodyDeclarations] "}"

---

BodyDeclarations:
    BodyDeclaration {BodyDeclaration}

EnumConstants:
    EnumConstant {"," EnumConstant}

UnionTypes:
    TypeDeclaration {"," TypeDeclaration}

> The semicolon in TypedefBody must never be found in TypedefDeclaration.

---

BodyDeclaration:
    StaticInitializer
    [DeclarationEncapsulation] MemberDeclaration
    [DeclarationEncapsulation] TypeDeclaration

> TypedefBody must always be found in TypedefDeclaration.

EnumConstant:
    ["."] Identifier ["=" VariableInitializer]
    ["."] Identifier ":" VariableInitializer

---

StaticInitializer:
    [NameStrictness] "static" [Version] [StringIdentifier] Block

MemberDeclaration:
    [MemberStaticity] FieldDeclaration
    [MemberStaticity] MethodDeclaration

VariableInitializer:
    Expression
    ArrayInitializer
    StructInitializer

---

NameStrictness:
    "strict"

MemberStaticity:
    "static"

FieldDeclaration:
    ValueMutability [ValueVolatility] [NameStrictness] Identifier [StringIdentifier] ":" Type ["=" VariableInitializer] ";"

MethodDeclaration:
    [DeclarationExtensibility] [MethodOverride] [FunctionStrictness] [FunctionPurity] "func" MethodHeader MethodBody

---

MethodOverride:
    "override"

MethodHeader:
    MethodDeclarator ["->" Result]

MethodBody:
    Block
    ";"

---

MethodDeclarator:
    [NameStrictness] Identifier [Version] [StringIdentifier] [":" TypeName] "(" [Parameters] ")"

---

Parameters:
    ThisParameter ["," FixedParameters] ["," VariableArityParameter]
    FixedParameters ["," VariableArityParameter]
    VariableArityParameter

---

FixedParameters:
    FixedParameter {"," FixedParameter}

VariableArityParameter:
    "..." Identifier [":" Type]

---

FixedParameter:
    Identifier [":" Type]

## Types
Type:
    PrimitiveType [PointerOrArraySuffix]
    TypeName [PointerOrArraySuffix]
    VoidPointerType [PointerOrArraySuffix]
    FunctionType
    "(" FunctionType ")" PointerNullity
    "(" FunctionType ")" PointerOrArraySuffix

---

PrimitiveType:
    [TypeAtomicity] NumericType
    [TypeAtomicity] "bool"
    [TypeAtomicity] "_char"

PointerOrArraySuffix:
    PointerSuffix [PointerOrArraySuffix]
    ArrayDim [PointerOrArraySuffix]

TypeName:
    [TypeStrictness] Identifier [Version] {"." Identifier [Version]}
    TypeBareness Identifier [Version] {"." Identifier [Version]}

VoidPointerType:
    "unsafe" "void" "&" [TypeAtomicity] [PointerNullity]

FunctionType:
    [TypeAtomicity] [FunctionStrictness] [FunctionPurity] "func" "(" [ParameterTypes] ")" "->" Result
    [TypeAtomicity] [FunctionStrictness] [FunctionPurity] "func" [ParameterTypes] "->" Result

PointerNullity:
    "?"

---

TypeAtomicity:
    "atomic"

NumericType:
    IntegralType
    FloatingPointType

PointerSuffix:
    [ValueMutability] [ValueVolatility] "&" [PointerWidth] [ReferenceAliasability] [PointerNullity]
    [ValueMutability] [ValueVolatility] "&" TypeAtomicity [ReferenceAliasability] [PointerNullity]

ArrayDim:
    "[" [TypeStrictness] [Expression] "]" [PointerNullity]
    "[" TypeBareness "]" [PointerNullity]

TypeStrictness:
    "strict"

TypeBareness:
    "unsafe" "bare"

FunctionStrictness:
    "strict"

FunctionPurity:
    ["local"] "const"
    ["local"] "pure"

ParameterTypes:
    ThisParameter ["," FixedParameterTypes] ["," VariableArityParameterType]
    FixedParameterTypes ["," VariableArityParameterType]
    VariableArityParameterType

Result:
    "noreturn"
    "void"
    Type

---

IntegralType:
    (one of)
    "_ubyte" "_byte" "_ushort" "_short" "_uint" "_int" "_ulong" "_long"

FloatingPointType:
    (one of)
    "_float" "_double"

ValueMutability:
    ["unused"] "var"
    ["local"] "const"

ValueVolatility:
    ["local"] "volatile"

PointerWidth:
    [["unsafe"] "unused"] [TypeStrictness] "wide"
    TypeBareness

ReferenceAliasability:
    ["local"] "aliasable"

ThisParameter:
    "this" [":" TypeName [ValueMutability] [ValueVolatility] ["&" [PointerWidth] [ReferenceAliasability]]]
    "this" ":" ValueMutability [ValueVolatility] ["&" [PointerWidth] [ReferenceAliasability]]
    "this" ":" ValueVolatility ["&" [PointerWidth] [ReferenceAliasability]]
    "this" ":" "&" [PointerWidth] [ReferenceAliasability]

FixedParameterTypes:
    FixedParameterType {"," FixedParameterType}

VariableArityParameterType:
    "..." ":" Type

---

FixedParameterType:
    ":" Type

## Blocks and Statements
Block:
    "{" [BlockStatements] "}"

---

BlockStatements:
    BlockStatement {BlockStatement}

## Expressions

## Array and Struct Initializers
ArrayInitializer:
    [":" Type] "[" [VariableInitializers] "]"

StructInitializer:
    [":" TypeName] "{" [FieldInitializers] "}"

---

VariableInitializers:
    VariableInitializer {"," VariableInitializer}

FieldInitializers:
    FieldInitializer {"," FieldInitializer}

---

FieldInitializer:
    ["."] Identifier "=" VariableInitializer
    ["."] Identifier ":" VariableInitializer
